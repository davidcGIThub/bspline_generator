"""
This module contains code that converts b-spline control points
to Bezier curve control points
"""
import numpy as np
from bsplinegenerator.helper_functions import count_number_of_control_points

def convert_to_minvo_control_points(bspline_control_points):
    number_of_control_points = count_number_of_control_points(bspline_control_points)
    order = number_of_control_points - 1
    if order > 7:
        raise Exception("Can only retrieve conversion matrix for curves of order 1-7")
    conversion_matrix = get_bspline_to_minvo_conversion_matrix(order)
    minvo_control_points = np.transpose(np.dot(conversion_matrix, np.transpose(bspline_control_points)))
    return minvo_control_points

def convert_list_to_minvo_control_points(bspline_control_points,order):
    number_of_bspline_control_points = count_number_of_control_points(bspline_control_points)
    composite_conversion_matrix = get_composite_bspline_to_minvo_conversion_matrix(number_of_bspline_control_points,order)
    minvo_control_point_list = np.transpose(np.dot(composite_conversion_matrix, np.transpose(bspline_control_points)))
    return minvo_control_point_list

def get_composite_bspline_to_minvo_conversion_matrix(num_bspline_control_points, order):
    if order > 7:
        raise Exception("Can only retrieve conversion matrix for curves of order 1-7")
    number_of_knot_point_segments = num_bspline_control_points - order
    number_of_minvo_control_points = (number_of_knot_point_segments)*(order+1)
    composite_conversion_matrix = np.zeros((number_of_minvo_control_points,num_bspline_control_points))
    conversion_matrix = get_bspline_to_minvo_conversion_matrix(order)
    for i in range(number_of_knot_point_segments):
        composite_conversion_matrix[i*(order+1):i*(order+1)+order+1 , i:i+order+1] = conversion_matrix
    return composite_conversion_matrix

def get_bspline_to_minvo_conversion_matrix(order):
    conversion_matrix = np.array([])

    if order == 1:
        conversion_matrix = np.array([[-1, 1],
                                      [1, 0]]).T
    elif order == 2:
        conversion_matrix = np.array([[ 0.53867513,  0.08333333, -0.03867513],
                                      [ 0.5,         0.83333333 , 0.5       ],
                                      [-0.03867513 , 0.08333333 , 0.53867513]]).T
    elif order == 3:
        conversion_matrix = np.array([[ 0.1837219,   0.05700954, -0.01545516, -0.00533879],
                                     [ 0.70176523,  0.66657382 , 0.2918718  ,  0.11985167],
                                     [ 0.11985167,  0.2918718  , 0.66657382 , 0.70176523],
                                     [-0.00533879, -0.01545516 , 0.05700954 ,  0.1837219 ]]).T
    elif order == 4:
        conversion_matrix = np.array([[ 0.04654488,  0.01902005, -0.0020279,  -0.00193449, -0.00105254],
                                      [ 0.49370783,  0.40331371,  0.18162853,  0.0395948,   0.01773369],
                                      [ 0.44306614,  0.54000593, 0.64079874,  0.54000593,  0.44306614],
                                      [ 0.01773369,  0.0395948,   0.18162853,  0.40331371,  0.49370783],
                                      [-0.00105254, -0.00193449, -0.0020279,   0.01902005,  0.04654488]]).T
    elif order == 5:
        conversion_matrix = np.array([[ 9.36633383e-03,  4.59221748e-03, -2.41070259e-05, -3.64703996e-04, -3.05969926e-04, -1.39856086e-04],
                                        [ 2.35803353e-01,  1.88464610e-01,  8.68737506e-02 , 2.46973953e-02, -6.38854070e-04,  2.36477513e-04],
                                        [ 5.64969670e-01,  5.74893473e-01,  5.12739907e-01,  3.76077758e-01, 2.32994524e-01,  1.89764022e-01],
                                        [ 1.89764022e-01 , 2.32994524e-01 , 3.76077758e-01 , 5.12739907e-01, 5.74893473e-01,  5.64969670e-01],
                                        [ 2.36477513e-04 ,-6.38854070e-04 , 2.46973953e-02 , 8.68737506e-02, 1.88464610e-01 , 2.35803353e-01],
                                        [-1.39856086e-04 ,-3.05969926e-04, -3.64703996e-04, -2.41070259e-05, 4.59221748e-03,  9.36633383e-03]]).T
    elif order == 6:
        conversion_matrix = np.array([[0.0015673013261596200063691627234054,   0.00086365958573481459082934164718087,  0.000072529009510193981453523389713465, -0.000060827300198005163150132104527589, -0.000048617373859850341236426744525371, -0.000031602487218597667419605402957684, -0.000019836374100934917533108312851288],
                [ 0.086685494064457982661616041913735,     0.069771729463297254362491229999255,     0.034459522555511007351613681598858,     0.011017789796016227347952001966402,    0.001022874621471957088779731829266,   -0.0017069297382149851628753259873781, -0.00089356992228718492515564483879434],
                [ 0.44151053682001590804989716687095,      0.42058964124015786726787258966978,      0.33399052351722979509038395738409,      0.2241835255776350962041341071433,      0.12932400505749663927837287343786,     0.070868392911277499117966039958345,   0.061201150391309814097279671094249],
                [ 0.4099489236944430352846165804626,       0.43964510902496538718275408954472,      0.50117916261264040485981047665333,      0.5297190238530935108259472436798,      0.50117916261264040485981047665333,     0.43964510902496538718275408954472,    0.4099489236944430352846165804626],
                [ 0.061201150391309814097279671094249,     0.070868392911277499117966039958345,     0.12932400505749663927837287343786,      0.2241835255776350962041341071433,      0.33399052351722979509038395738409,     0.42058964124015786726787258966978,    0.44151053682001590804989716687095],
                [-0.00089356992228718492515564483879434,  -0.0017069297382149851628753259873781,    0.001022874621471957088779731829266,     0.011017789796016227347952001966402,    0.034459522555511007351613681598858,    0.069771729463297254362491229999255,   0.086685494064457982661616041913735],
                [-0.000019836374100934917533108312851288, -0.000031602487218597667419605402957684, -0.000048617373859850341236426744525371, -0.000060827300198005163150132104527589, 0.000072529009510193981453523389713465, 0.00086365958573481459082934164718087, 0.0015673013261596200063691627234054]]).T
    
    elif order == 7:
        conversion_matrix = np.array([[0.00022428031175139061285260626677095,    0.00013513874256402826186596446559443,   0.000020709635337561553818374320063958,  -0.000006886557963029641619274086529499, -0.0000077356098441786850369139886516143, -0.0000039355521071470918751517887926294, -0.0000040323323856154789413751338051599, -0.0000021869677709226337744440535293076],
                [0.026142355417612899750687673989683,       0.02148526549159615482191328772425,      0.011240277531447318192462756951911,     0.0041848756747159772795357862370816,    0.00058803234003523545146332593303603,   -0.00029378157094206690131902596749094,   -0.00064742428750239711695222490399308,   -0.00033092823209790038775099705535793],
                [0.2516484495603468383732647824107,       0.23472600257366537822644304610283,       0.17697599487580784859160458888522,        0.1161643441467228179916394850984,      0.063070703692555895654085010625911,      0.032951859810865562283675061080646,      0.015643714659805141795624074118701,      0.015590965226372579133576396131442],
                [0.48780380655924084588080960092844,       0.49433520626075415410048915345936,        0.4821947826777955353541460146772,       0.44395414677862366884378260553705,       0.37205251953515363857856817991431,       0.29691409259179551833419611396976,       0.23432612889150319883642357199768,       0.21892325812454416218463854732815],
                [0.21892325812454416218463854732815,       0.23432612889150319883642357199768,       0.29691409259179551833419611396976,       0.37205251953515363857856817991431,       0.44395414677862366884378260553705,        0.4821947826777955353541460146772,       0.49433520626075415410048915345936,       0.48780380655924084588080960092844],
                [0.015590965226372579167149098849076,      0.015643714659805141857050041081942,      0.032951859810865562352497242188625,      0.063070703692555895733355465791096,       0.11616434414672281786163527853815,       0.17697599487580784786961919759341,       0.23472600257366537651617348525876,       0.25164844956034683617425974731834],
                [-0.00033092823209789928824847950917573,   -0.00064742428750239626181744448195926,   -0.00029378157094206654032633032158811,    0.00058803234003523551646542921316165,     0.0041848756747159772399005586544894,      0.011240277531447318158051666397921,       0.02148526549159615479120030424263,      0.026142355417612899733901322630866],
                [-0.0000021869677709226337744440535293076, -0.0000040323323856154789413751338051599, -0.0000039355521071470918751517887926294, -0.0000077356098441786850369139886516143,  -0.000006886557963029641619274086529499,   0.000020709635337561553818374320063958,    0.00013513874256402826186596446559443,    0.00022428031175139061285260626677095]]).T
    else:
        raise Exception("Can only retrieve conversion matrix for curves of order 1-7")
    return conversion_matrix


def bezier_to_minvo_control_points(bezier_control_points):
    number_of_control_points = count_number_of_control_points(bezier_control_points)
    print("num control points " , number_of_control_points)
    order = number_of_control_points - 1
    conversion_matrix = get_bezier_to_minvo_conversion_matrix(order)
    bezier_control_points = np.transpose(np.dot(conversion_matrix, np.transpose(bezier_control_points)))
    return bezier_control_points

def get_bezier_to_minvo_conversion_matrix(order):

    conversion_matrix = np.array([])
    if order == 1:
        conversion_matrix = np.array([[1,0],
                                      [0,1]])
        conversion_matrix = np.dot(np.array([[-1, 1],[1, 0]]).T , conversion_matrix)
    elif order == 2:
        conversion_matrix = np.array([[2,-1,0],
                                      [0,1,0],
                                      [0,-1,2]])
        conversion_matrix = np.dot(np.array([[ 0.53867513,  0.08333333, -0.03867513],
                                      [ 0.5,         0.83333333 , 0.5       ],
                                      [-0.03867513 , 0.08333333 , 0.53867513]]).T , conversion_matrix)          
    elif order == 3:
        conversion_matrix = np.array([[6,-7,2,0],
                                      [0,2,-1,0],
                                      [0,-1,2,0],
                                      [0,2,-7,6]])
        conversion_matrix = np.dot(np.array([[ 0.1837219,   0.05700954, -0.01545516, -0.00533879],
                                     [ 0.70176523,  0.66657382 , 0.2918718  ,  0.11985167],
                                     [ 0.11985167,  0.2918718  , 0.66657382 , 0.70176523],
                                     [-0.00533879, -0.01545516 , 0.05700954 ,  0.1837219 ]]).T , conversion_matrix)
    elif order == 4:
        conversion_matrix = np.array([[24, -46, 29, -6, 0],
                                      [0, 6, -7, 2, 0],
                                      [0, -2, 5, -2, 0],
                                      [0, 2, -7, 6, 0],
                                      [0, -6, 29, -46, 24]])
        conversion_matrix = np.dot(np.array([[ 0.04654488,  0.01902005, -0.0020279,  -0.00193449, -0.00105254],
                                      [ 0.49370783,  0.40331371,  0.18162853,  0.0395948,   0.01773369],
                                      [ 0.44306614,  0.54000593, 0.64079874,  0.54000593,  0.44306614],
                                      [ 0.01773369,  0.0395948,   0.18162853,  0.40331371,  0.49370783],
                                      [-0.00105254, -0.00193449, -0.0020279,   0.01902005,  0.04654488]]).T , conversion_matrix)
    elif order == 5:
        conversion_matrix = np.array([[120,-326,329,-146,24,0],
                                      [0,24,-46,29,-6,0],
                                      [0,-6,19,-16,4,0],
                                      [0,4,-16,19,-6,0],
                                      [0,-6,29,-46,24,0],
                                      [0,24,-146,329,-326,120]])
        conversion_matrix = np.dot(np.array([[ 9.36633383e-03,  4.59221748e-03, -2.41070259e-05, -3.64703996e-04, -3.05969926e-04, -1.39856086e-04],
                                        [ 2.35803353e-01,  1.88464610e-01,  8.68737506e-02 , 2.46973953e-02, -6.38854070e-04,  2.36477513e-04],
                                        [ 5.64969670e-01,  5.74893473e-01,  5.12739907e-01,  3.76077758e-01, 2.32994524e-01,  1.89764022e-01],
                                        [ 1.89764022e-01 , 2.32994524e-01 , 3.76077758e-01 , 5.12739907e-01, 5.74893473e-01,  5.64969670e-01],
                                        [ 2.36477513e-04 ,-6.38854070e-04 , 2.46973953e-02 , 8.68737506e-02, 1.88464610e-01 , 2.35803353e-01],
                                        [-1.39856086e-04 ,-3.05969926e-04, -3.64703996e-04, -2.41070259e-05, 4.59221748e-03,  9.36633383e-03]]).T , conversion_matrix)
    else:
        raise Exception("Can only retrieve conversion matrix for curves of order 1-5")
    print("conversion_matrix: " , conversion_matrix)
    return conversion_matrix


##### Abe matrices #####

# def __get_1_order_matrix():
#     M = np.array([[-1,1],
#                     [1,0]])
#     return M

# def __get_2_order_matrix():
#     M = .5*np.array([[1,-2,1],
#                         [-2,2,1],
#                         [1,0,0]])
#     return M

# def __get_3_order_matrix():
#     M = np.array([[-2 ,  6 , -6 , 2],
#                     [ 6 , -12 ,  0 , 8],
#                     [-6 ,  6 ,  6 , 2],
#                     [ 2 ,  0 ,  0 , 0]])/12
#     return M

# def __get_4_order_matrix():
#     M = np.array([[ 1 , -4  ,  6 , -4  , 1],
#                     [-4 ,  12 , -6 , -12 , 11],
#                     [ 6 , -12 , -6 ,  12 , 11],
#                     [-4 ,  4  ,  6 ,  4  , 1],
#                     [ 1 ,  0  ,  0 ,  0  , 0]])/24
#     return M

# def __get_5_order_matrix():
#     M = np.array([[-1  ,  5  , -10 ,  10 , -5  , 1],
#                     [ 5  , -20 ,  20 ,  20 , -50 , 26],
#                     [-10 ,  30 ,  0  , -60 ,  0  , 66],
#                     [ 10 , -20 , -20 ,  20 ,  50 , 26],
#                     [-5  ,  5  ,  10 ,  10 ,  5  , 1 ],
#                     [ 1  ,  0  ,  0  ,  0  ,  0  , 0]])/120
#     return M


# ##### Amv matrices #####

# np.array([[-1,1],
#             [ 1,1]])/2
    
# np.array([[ 3, -2/np.sqrt(3) , 1],
#             [-6,  0            , 6],
#             [ 3,  2/np.sqrt(3) , 1]])

# np.array([[-0.4302, 0.4568, -0.02698, 0.0004103],
#           [-0.4568, -0.7921, 0.4996, 0.8349],
#           [0.7921, 0.4996, -0.8349, -0.4568],
#           [0.4302, 0.4568, 0.02698, 0.0004103]])