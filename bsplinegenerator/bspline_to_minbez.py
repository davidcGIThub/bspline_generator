"""
This module contains code that converts b-spline control points
to Bezier curve control points
"""
import numpy as np
from bsplinegenerator.helper_functions import count_number_of_control_points

def convert_to_minvbez_control_points(bspline_control_points):
    number_of_control_points = count_number_of_control_points(bspline_control_points)
    order = number_of_control_points - 1
    if order > 7:
        raise Exception("Can only retrieve conversion matrix for curves of order 1-7")
    conversion_matrix = get_bspline_to_minvbez_conversion_matrix(order)
    minvo_control_points = np.transpose(np.dot(conversion_matrix, np.transpose(bspline_control_points)))
    return minvo_control_points

def convert_list_to_minvbez_control_points(bspline_control_points,order):
    number_of_bspline_control_points = count_number_of_control_points(bspline_control_points)
    composite_conversion_matrix = get_composite_bspline_to_minvbez_conversion_matrix(number_of_bspline_control_points,order)
    minvo_control_point_list = np.transpose(np.dot(composite_conversion_matrix, np.transpose(bspline_control_points)))
    return minvo_control_point_list

def get_composite_bspline_to_minvbez_conversion_matrix(num_bspline_control_points, order):
    if order > 7:
        raise Exception("Can only retrieve conversion matrix for curves of order 1-7")
    number_of_knot_point_segments = num_bspline_control_points - order
    number_of_minvo_control_points = (number_of_knot_point_segments)*(order+1)
    composite_conversion_matrix = np.zeros((number_of_minvo_control_points,num_bspline_control_points))
    conversion_matrix = get_bspline_to_minvbez_conversion_matrix(order)
    for i in range(number_of_knot_point_segments):
        composite_conversion_matrix[i*(order+1):i*(order+1)+order+1 , i:i+order+1] = conversion_matrix
    return composite_conversion_matrix


def get_bspline_to_minvbez_conversion_matrix(order):
    conversion_matrix = np.array([])

    if order == 1:
        conversion_matrix = np.array([[1, 0],
                                      [0, 1]])
    elif order == 2:
        conversion_matrix = np.array([[ 1/2,  0.08333333, 0],
                                      [ 1/2,         0.83333333 , 1/2       ],
                                      [0 , 0.08333333 , 1/2]]).T
    elif order == 3:
        conversion_matrix = np.array([[   1/6 ,   0.05700954 , -0.01545516 , 0],
                                     [2/3 ,  0.66657382 , 0.2918718 ,  1/6],
                                     [1/6,  0.2918718 , 0.66657382 , 2/3],
                                     [0 , -0.01545516 , 0.05700954 ,  1/6]]).T
    elif order == 4:
        conversion_matrix = np.array([[ 1/24,  0.01902005, -0.0020279,  -0.00193449, 0],
                                      [ 11/24,  0.40331371,  0.18162853,  0.0395948,   1/24],
                                      [ 11/24,  0.54000593, 0.64079874,  0.54000593,  11/24],
                                      [ 1/24,  0.0395948,   0.18162853,  0.40331371,  11/24],
                                      [ 0, -0.00193449, -0.0020279,   0.01902005,  1/24]]).T
    elif order == 5:
        conversion_matrix = np.array([[ 1/120,  4.59221748e-03, -2.41070259e-05, -3.64703996e-04, -3.05969926e-04, 0],
                                        [ 13/60,  1.88464610e-01,  8.68737506e-02 , 2.46973953e-02, -6.38854070e-04,  1/120],
                                        [ 33/60,  5.74893473e-01,  5.12739907e-01,  3.76077758e-01, 2.32994524e-01,  13/60],
                                        [ 13/60 , 2.32994524e-01 , 3.76077758e-01 , 5.12739907e-01, 5.74893473e-01,  33/60],
                                        [ 1/120 ,-6.38854070e-04 , 2.46973953e-02 , 8.68737506e-02, 1.88464610e-01 , 13/60],
                                        [0 ,-3.05969926e-04, -3.64703996e-04, -2.41070259e-05, 4.59221748e-03,  1/120]]).T
    elif order == 6:
        conversion_matrix = np.array([[1/720,   0.00086365958573481459082934164718087,  0.000072529009510193981453523389713465, -0.000060827300198005163150132104527589, -0.000048617373859850341236426744525371, -0.000031602487218597667419605402957684, 0],
                [ 19/240,     0.069771729463297254362491229999255,     0.034459522555511007351613681598858,     0.011017789796016227347952001966402,    0.001022874621471957088779731829266,   -0.0017069297382149851628753259873781, 1/720],
                [ 151/360,      0.42058964124015786726787258966978,      0.33399052351722979509038395738409,      0.2241835255776350962041341071433,      0.12932400505749663927837287343786,     0.070868392911277499117966039958345,   19/240],
                [ 151/360,       0.43964510902496538718275408954472,      0.50117916261264040485981047665333,      0.5297190238530935108259472436798,      0.50117916261264040485981047665333,     0.43964510902496538718275408954472,    151/360],
                [ 19/240,     0.070868392911277499117966039958345,     0.12932400505749663927837287343786,      0.2241835255776350962041341071433,      0.33399052351722979509038395738409,     0.42058964124015786726787258966978,    151/360],
                [1/720,  -0.0017069297382149851628753259873781,    0.001022874621471957088779731829266,     0.011017789796016227347952001966402,    0.034459522555511007351613681598858,    0.069771729463297254362491229999255,   19/240],
                [0, -0.000031602487218597667419605402957684, -0.000048617373859850341236426744525371, -0.000060827300198005163150132104527589, 0.000072529009510193981453523389713465, 0.00086365958573481459082934164718087, 1/720]]).T
    
    elif order == 7:
        conversion_matrix = np.array([[1/5040,    0.00013513874256402826186596446559443,   0.000020709635337561553818374320063958,  -0.000006886557963029641619274086529499, -0.0000077356098441786850369139886516143, -0.0000039355521071470918751517887926294, -0.0000040323323856154789413751338051599, 0],
                [5/210,       0.02148526549159615482191328772425,      0.011240277531447318192462756951911,     0.0041848756747159772795357862370816,    0.00058803234003523545146332593303603,   -0.00029378157094206690131902596749094,   -0.00064742428750239711695222490399308,   1/5040],
                [397/1680,       0.23472600257366537822644304610283,       0.17697599487580784859160458888522,        0.1161643441467228179916394850984,      0.063070703692555895654085010625911,      0.032951859810865562283675061080646,      0.015643714659805141795624074118701,      5/210],
                [151/315,       0.49433520626075415410048915345936,        0.4821947826777955353541460146772,       0.44395414677862366884378260553705,       0.37205251953515363857856817991431,       0.29691409259179551833419611396976,       0.23432612889150319883642357199768,       397/1680],
                [397/1680,       0.23432612889150319883642357199768,       0.29691409259179551833419611396976,       0.37205251953515363857856817991431,       0.44395414677862366884378260553705,        0.4821947826777955353541460146772,       0.49433520626075415410048915345936,       151/315],
                [5/210,      0.015643714659805141857050041081942,      0.032951859810865562352497242188625,      0.063070703692555895733355465791096,       0.11616434414672281786163527853815,       0.17697599487580784786961919759341,       0.23472600257366537651617348525876,       397/1680],
                [1/5040,   -0.00064742428750239626181744448195926,   -0.00029378157094206654032633032158811,    0.00058803234003523551646542921316165,     0.0041848756747159772399005586544894,      0.011240277531447318158051666397921,       0.02148526549159615479120030424263,      5/210],
                [0, -0.0000040323323856154789413751338051599, -0.0000039355521071470918751517887926294, -0.0000077356098441786850369139886516143,  -0.000006886557963029641619274086529499,   0.000020709635337561553818374320063958,    0.00013513874256402826186596446559443,    1/5040]]).T
    else:
        raise Exception("Can only retrieve conversion matrix for curves of order 1-7")
    return conversion_matrix



